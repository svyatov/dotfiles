### Prompt
PS1="\[$(tput sgr0)\]\[$(tput bold)\]\[$(tput setaf 6)\]\t\[$(tput setaf 7)\]|\[$(tput setaf 3)\]\!\[$(tput setaf 7)\]|\[$(tput setaf 3)\]\j\[$(tput setaf 7)\]|\[$(tput setaf 2)\]\u\[$(tput setaf 0)\]@\[$(tput setaf 1)\]\h \[$(tput setaf 4)\]\w \[$(tput setaf 7)\]\\$ \[$(tput sgr0)\]"

### Aliases
alias v='vim'
alias h='cd ~'
alias u='cd ..'
alias b='cd -'
alias q='exit'
alias c='clear'
alias vb='vim ~/.bashrc'
alias sb='. ~/.bashrc && echo .bashrc sourced'
alias ct='crontab -e'
alias vsa='vim +"let b:is_bash=1" +"set ft=sh et ts=4 sw=4" ~/.server_aliases'
alias ssa='. ~/.server_aliases && echo .server_aliases sourced'

### Functions
function mkcd() {
    mkdir $1 && cd $1
}

function lt() {
    ls -ltrsa "$@" | tail
}

function psgrep() {
    ps axuf | grep -v grep | grep "$@" -i
}

function hgrep() {
    history | grep -v grep | grep "$@" -i
}

function sa_update() {
    curl -o ~/.server_aliases "https://raw.github.com/Svyatov/dotfiles/master/bash/.server_aliases" \
    && ssa && echo ".server_aliases has been updated successfully"
}

### !!! DANGER, USE WITH CAUTION, POSSIBLE EXPLOIT !!!
### If your source is compromised attacker will gain full access to the server
# function setup_sa_crontab_autoupdate() {
#     local bin_dir="$HOME/bin"
#     local cron_script="${bin_dir}/sa_crontab_autoupdate.sh"
#     local crontab_line="*/1 * * * * \"${cron_script}\""

#     mkdir -p "${bin_dir}"

#     if [[ ! -d ${bin_dir} ]]; then
#         echo "Cannot create ${bin_dir} directory!"
#         return 1
#     fi

#     if [[ ! -f ${cron_script} ]]; then
#         touch "${cron_script}" && chmod +x "${cron_script}"
#     fi

#     if [[ ! -w ${cron_script} ]]; then
#         echo "${cron_script} is not writable!"
#         return 2
#     fi

#     if [[ ! -x ${cron_script} ]]; then
#         echo "Cannot make ${cron_script} executable!"
#         return 3
#     fi

#     echo "#!/bin/bash" > "${cron_script}"
#     echo "curl -o ${HOME}/.server_aliases \"https://raw.github.com/Svyatov/dotfiles/master/bash/.server_aliases\"" >> "${cron_script}"

#     if [[ $1 == "admin" ]]; then
#         echo "curl -o ${HOME}/.server_admin_aliases \"https://raw.github.com/Svyatov/dotfiles/master/bash/.server_admin_aliases\"" >> "${cron_script}"
#     fi

#     # Check if crontab exists
#     crontab -l > /dev/null 2>&1
#     if [[ $? -eq 0 ]]; then
#         crontab -l | grep -Ev "^#|${cron_script}" | { cat; echo "${crontab_line}"; } | crontab -
#     else
#         echo "${crontab_line}" | crontab -
#     fi
# }

# Wraps a completion function
# make-completion-wrapper <actual completion function> <name of new func.>
#                         <command name> <list supplied arguments>
# eg.
#       alias agi='apt-get install'
#       make-completion-wrapper _apt_get _apt_get_install apt-get install
# defines a function called _apt_get_install (that's $2) that will complete
# the 'agi' alias. (complete -F _apt_get_install agi)
function make-completion-wrapper() {
        local function_name="$2"
        local arg_count=$(($#-3))
        local comp_function_name="$1"
        shift 2
        local function="
function $function_name {
        ((COMP_CWORD+=$arg_count))
        COMP_WORDS=( "$@" \${COMP_WORDS[@]:1} )
        "$comp_function_name"
        return 0
}"
        eval "$function"
}
