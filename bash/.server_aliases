### Prompt
if [[ $EUID -ne 0 ]]; then
    PS1="\[$(tput sgr0)\]\[$(tput bold)\]\[$(tput setaf 6)\]\t\[$(tput setaf 7)\]|\[$(tput setaf 3)\]\!\[$(tput setaf 7)\]|\[$(tput setaf 3)\]\j\[$(tput setaf 7)\]|\[$(tput setaf 2)\]\u\[$(tput setaf 0)\]@\[$(tput setaf 5)\]\h \[$(tput setaf 4)\]\w \[$(tput setaf 2)\]\\$ \[$(tput sgr0)\]"
else # root
    PS1="\[$(tput sgr0)\]\[$(tput bold)\]\[$(tput setaf 6)\]\t\[$(tput setaf 7)\]|\[$(tput setaf 3)\]\!\[$(tput setaf 7)\]|\[$(tput setaf 3)\]\j\[$(tput setaf 7)\]|\[$(tput setaf 1)\]\u\[$(tput setaf 0)\]@\[$(tput setaf 5)\]\h \[$(tput setaf 4)\]\w \[$(tput setaf 1)\]\\$ \[$(tput sgr0)\]"
fi

# Safe alias
function safe_alias() {
    if [[ $3 == 'override' ]]; then
        alias "$1"="$2"
    elif ! type "$1" &> /dev/null; then
        alias "$1"="$2"
    else
        echo "Unable to create alias: $(type "$1")"
    fi
}

### Aliases
safe_alias l 'ls -laGh'
safe_alias v 'vim'
safe_alias h 'cd ~'
safe_alias u 'cd ..'
safe_alias b 'cd -'
safe_alias q 'exit'
safe_alias c 'clear'
safe_alias cl 'clear && l'
safe_alias vb 'vim ~/.bashrc'
safe_alias sb '. ~/.bashrc && echo .bashrc sourced'
safe_alias ct 'crontab -e'
safe_alias vsa 'vim +"let b:is_bash=1" +"set ft=sh et ts=4 sw=4" ~/.server_aliases'
safe_alias ssa '. ~/.server_aliases && echo .server_aliases sourced'
safe_alias shrl 'exec $SHELL -l' # shell reload

### Functions
function mkcd() {
    mkdir "$1" && cd "$1"
}

function lt() {
    ls -ltrsa "$@" | tail
}

function psgrep() {
    ps axuf | grep -v grep | grep "$@" -i
}

function hgrep() {
    history | grep -v grep | grep "$@" -i
}

function sa_update() {
    curl -o ~/.server_aliases "https://raw.githubusercontent.com/Svyatov/dotfiles/master/bash/.server_aliases" \
    && ssa && echo ".server_aliases has been updated successfully"
}

# Wraps a completion function
# make-completion-wrapper <actual completion function> <name of new func.>
#                         <command name> <list supplied arguments>
# eg.
#       alias agi='apt-get install'
#       make-completion-wrapper _apt_get _apt_get_install apt-get install
# defines a function called _apt_get_install (that's $2) that will complete
# the 'agi' alias. (complete -F _apt_get_install agi)
function make-completion-wrapper() {
    local function_name="$2"
    local arg_count=$(($#-3))
    local comp_function_name="$1"
    shift 2
    local function="
function $function_name {
    ((COMP_CWORD+=$arg_count))
    COMP_WORDS=( "$@" \${COMP_WORDS[@]:1} )
    "$comp_function_name"
    return 0
}"
    eval "$function"
}

export JUMPS_PATH=$HOME/.jump_shortcuts

safe_alias j 'jump'
safe_alias ja 'jump-add'
safe_alias jd 'jump-del'
safe_alias jl 'jump-list'
safe_alias jb 'jump-back'

_jumps_usage_help() {
    echo "You can use following commands:"
    echo " j [shortcut] - jump to shortcutted directory"
    echo "ja [shortcut] - add shortcut for current directory"
    echo "jd [shortcut] - delete shortcut"
    echo "jl            - list all available jump shortcuts"
    echo "jb            - return to previous directory (before the last jump)"
}

_jumps_no_such_shortcut() {
    echo "No such jump shortcut: ${1}"
}

_jumps_no_shortcuts() {
    echo "There are no shortcuts, yet. You should add some first!"
}

jump() {
    if [[ -z $1 ]]; then _jumps_usage_help; return 1; fi
    if [[ -L $JUMPS_PATH/$1 ]]; then
        clear
        JUMPS_BACK=$(pwd)
        cd -P $JUMPS_PATH/$1 2> /dev/null && ls -laGh
    else
        _jumps_no_such_shortcut $1
    fi
}

jump-back() {
    if [[ -d $JUMPS_BACK ]]; then
        clear
        cd $JUMPS_BACK 2> /dev/null
        JUMPS_BACK=''
    fi
}

jump-add() {
    if [[ -z $1 ]]; then _jumps_usage_help; return 1; fi
    if [[ ! -d $JUMPS_PATH ]]; then
        mkdir -p $JUMPS_PATH;
    fi
    if [[ -L $JUMPS_PATH/$1 ]]; then
        local jump_destination=$(readlink $JUMPS_PATH/$1)
        echo "Shortcut \"${1}\" already exists and points to: ${jump_destination}"
    else
        ln -s "$(pwd)" $JUMPS_PATH/$1 && \
            echo "Shortcut \"${1}\" pointing to $(pwd) successfully added"
    fi
}

jump-del() {
    if [[ -z $1 ]]; then _jumps_usage_help; return 1; fi
    if [[ -L $JUMPS_PATH/$1 ]]; then
        rm $JUMPS_PATH/$1 && \
            echo "Shortcut \"${1}\" successfully deleted"
    else
        _jumps_no_such_shortcut $1
    fi
}

jump-list() {
    if [[ ! -d $JUMPS_PATH ]]; then
        _jumps_no_shortcuts && return 1;
    fi

    local shortcuts
    local shortcut_link
    local shortcut_length
    local shortcut_basename
    local max_shortcut_length=0

    shortcuts=("$(find $JUMPS_PATH -type l)")

    for shortcut in $shortcuts; do
        shortcut_basename=${shortcut##*/}
        shortcut_length=${#shortcut_basename}
        if [[ $shortcut_length -gt $max_shortcut_length ]]; then
            max_shortcut_length=$shortcut_length
        fi
    done

    if [[ $max_shortcut_length -eq 0 ]]; then
        _jumps_no_shortcuts && return 1;
    fi

    local delimiter="-->"

    for shortcut in $shortcuts; do
        shortcut_basename="${shortcut##*/}"
        shortcut_link="$(readlink $shortcut)"
        echo "$(printf "  %-${max_shortcut_length}s %s  %s\n" $shortcut_basename $delimiter $shortcut_link)"
    done
}

_jump-list() {
    COMPREPLY=()
    if [[ -d $JUMPS_PATH ]]; then
        COMPREPLY=($(compgen -W "$(\ls $JUMPS_PATH)" -- "${COMP_WORDS[COMP_CWORD]}"))
    fi
}
complete -F _jump-list jump
complete -F _jump-list jump-del
complete -F _jump-list j
complete -F _jump-list jd
